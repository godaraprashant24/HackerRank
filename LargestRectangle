import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the largestRectangle function below.
    static long largestRectangle(int[] h) {
        long[] out = new long[h.length];
        int[] shorterToLeft = shorterToLeft(h);
        int[] shorterToRight = shorterToRight(h);
        for(int i=0;i<h.length;i++){
            //width = (index of shorter element on right) - (index of shorter element on left) - 1(to balance the index)
            //height = h[i](for ith element)
            out[i]=(shorterToRight[i]-shorterToLeft[i]-1)*h[i];
        }
        return maxLong(out);
    }
    
    // To find the max area
    static long maxLong(long[] h){
        long max=h[0];
        for(int i=1;i<h.length;i++){
            if(h[i]>max){
                max=h[i];
            }
        }
        return max;
    }
    
    //To find the index of the first shorter element on the left
    static int[] shorterToLeft(int[] h){
        Stack<Integer[]> st =new Stack<Integer[]>();
        int[] out = new int[h.length];
        //Going left to right
        for(int i=0;i<h.length;i++){
            if(st.isEmpty()){
                out[i]=-1;
            }else if(!st.isEmpty() && st.peek()[0]<h[i]){
                out[i]=st.peek()[1];
            }else if(!st.isEmpty() && st.peek()[0]>=h[i]){
                while(!st.isEmpty() && st.peek()[0]>=h[i]){
                    st.pop();
                }
                if(st.isEmpty()){
                    out[i]=-1;
                }else if(!st.isEmpty() && st.peek()[0]<h[i]){
                    out[i]=st.peek()[1];
                }
            }
            Integer[] temp=new Integer[2];
            temp[0]=h[i];
            temp[1]=i;
            st.push(temp);
        }
        return out;
    }
    
    //To find the index of the first shorter element on the Right
    static int[] shorterToRight(int[] h){
        Stack<Integer[]> st =new Stack<Integer[]>();
        int[] out = new int[h.length];
        //Going Right to left
        for(int i=h.length-1;i>=0;i--){
            if(st.isEmpty()){
                out[i]=h.length;
            }else if(!st.isEmpty() && st.peek()[0]<h[i]){
                out[i]=st.peek()[1];
            }else if(!st.isEmpty() && st.peek()[0]>=h[i]){
                while(!st.isEmpty() && st.peek()[0]>=h[i]){
                    st.pop();
                }
                if(st.isEmpty()){
                    out[i]=h.length;
                }else if(!st.isEmpty() && st.peek()[0]<h[i]){
                    out[i]=st.peek()[1];
                }
            }
            Integer[] temp=new Integer[2];
            temp[0]=h[i];
            temp[1]=i;
            st.push(temp);
        }
        return out;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] h = new int[n];

        String[] hItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int hItem = Integer.parseInt(hItems[i]);
            h[i] = hItem;
        }

        long result = largestRectangle(h);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
