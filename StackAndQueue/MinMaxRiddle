import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the riddle function below.
    //Find the max. element from all the possible window size for the given array
    static long[] riddle(long[] arr) {
        //similar to largest area rectangle
        long[] sRight = shorterToRight(arr);
        long[] sLeft = shorterToLeft(arr);
        
        long[] out = new long[arr.length];
        for(int i=0;i<arr.length;i++){
            //the difference of smaller to right and left gives the min. element for that window size(window here is the rectangle) in the array
            // -2 to prevent ArrayOutOfBound Exception ==> right-left-1 gives width of rectangle --> (right-left-1)-1 is done for index
            int length = (int)sRight[i]-(int)sLeft[i]-2;
            //using the max to get the max. element among all the min. elements in that window(rectangle)
            out[length] = Math.max(out[length],arr[i]);
        }
        //some indices can have 0--> in such cases the number can only be equal to the element next to it. so filling the indices below. 
        for(int i=out.length-2;i>=1;i--){
            out[i]=Math.max(out[i],out[i+1]);
        }
        return out;
    }
    
    static long[] shorterToLeft(long[] h){
        Stack<Long[]> st =new Stack<Long[]>();
        long[] out = new long[h.length];
        for(int i=0;i<h.length;i++){
            if(st.isEmpty()){
                out[i]=-1;
            }else if(!st.isEmpty() && st.peek()[0]<h[i]){
                out[i]=st.peek()[1];
            }else if(!st.isEmpty() && st.peek()[0]>=h[i]){
                while(!st.isEmpty() && st.peek()[0]>=h[i]){
                    st.pop();
                }
                if(st.isEmpty()){
                    out[i]=-1;
                }else if(!st.isEmpty() && st.peek()[0]<h[i]){
                    out[i]=st.peek()[1];
                }
            }
            Long[] temp=new Long[2];
            temp[0]=h[i];
            temp[1]=(long)i;
            st.push(temp);
        }
        return out;
    }
    
    static long[] shorterToRight(long[] h){
        Stack<Long[]> st =new Stack<Long[]>();
        long[] out = new long[h.length];
        for(int i=h.length-1;i>=0;i--){
            if(st.isEmpty()){
                out[i]=h.length;
            }else if(!st.isEmpty() && st.peek()[0]<h[i]){
                out[i]=st.peek()[1];
            }else if(!st.isEmpty() && st.peek()[0]>=h[i]){
                while(!st.isEmpty() && st.peek()[0]>=h[i]){
                    st.pop();
                }
                if(st.isEmpty()){
                    out[i]=h.length;
                }else if(!st.isEmpty() && st.peek()[0]<h[i]){
                    out[i]=st.peek()[1];
                }
            }
            Long[] temp=new Long[2];
            temp[0]=h[i];
            temp[1]=(long)i;
            st.push(temp);
        }
        return out;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        long[] arr = new long[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            long arrItem = Long.parseLong(arrItems[i]);
            arr[i] = arrItem;
        }

        long[] res = riddle(arr);

        for (int i = 0; i < res.length; i++) {
            bufferedWriter.write(String.valueOf(res[i]));

            if (i != res.length - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
